// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  phone    String
  password String
  role     Role   @default(USER)

  // cartItems CartItem[]
  profile  Profile?
  carts    Cart[]
  invoices Invoice[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@map("users")
}

// d

enum Role {
  ADMIN
  USER
}

model Profile {
  id        Int        @id @default(autoincrement())
  location  String
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  locations Location[]

  @@map("profiles")
}

// d

model Cart {
  id        Int        @id @default(autoincrement())
  prices    Decimal
  discount  Decimal
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  storeId   Int
  store     Store      @relation(fields: [storeId], references: [id])
  cartItems CartItem[]
  Invoice   Invoice? // E: 1 to n or 1 to 1

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

// d

model Invoice {
  id                   Int                   @id @default(autoincrement())
  prices               Decimal
  serviceChange        String
  status               String
  receiverLongitude    String
  receiverLatitude     String
  receiverDistrict     String
  receiverPhone        String
  receiverAddress      String
  receiverName         String
  invoiceNumber        Int
  cartId               Int                   @unique
  cart                 Cart                  @relation(fields: [cartId], references: [id])
  paymentId            Int                   @unique
  payment              Payment               @relation(fields: [paymentId], references: [id])
  // courierId            Int                   @unique
  // courier              Courier               @relation(fields: [courierId], references: [id])
  userId               Int
  user                 User                  @relation(fields: [userId], references: [id])
  invoiceHistories     InvoiceHistory[]
  confirmationPayments ConfirmationPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

// d?

model Payment {
  id                 Int      @id @default(autoincrement())
  bank               String
  amount             String
  status             String
  invoice            Invoice?
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  mootaTransactionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// d

model InvoiceHistory {
  id        Int     @id @default(autoincrement())
  status    String
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoice_histories")
}

// d

model ConfirmationPayment {
  id        Int     @id @default(autoincrement())
  amount    Int
  bank      String
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("confirmation_payments")
}

// d

model Courier {
  id                 Int    @id @default(autoincrement())
  courierCode        String
  courierServiceCode String
  courierServiceName String
  price              Int
  orderId            Int    @unique
  order              Order  @relation(fields: [orderId], references: [id])
  // invoice            Invoice?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("couriers")
}

// d

model Store {
  id               Int    @id @default(autoincrement())
  name             String
  slogan           String
  description      String
  domain           String
  logoAttachment   String
  bannerAttachment String

  bankAccounts       BankAccount[]
  carts              Cart[]
  storeOnDecorations StoreOnDecoration[]
  messageTemplates   MessageTemplate[]
  products           Product[]
  // cartItems          CartItem[]
  locations          Location[]
  operationHour      OperationHour?
  locationId         Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stores")
}

// d

model StoreOnDecoration {
  id           Int        @id @default(autoincrement())
  decorationId Int
  decoration   Decoration @relation(fields: [decorationId], references: [id])
  storeId      Int
  store        Store      @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("store_on_decorations")
}

// d

model OperationHour {
  id      Int      @id @default(autoincrement())
  day     String
  openAt  DateTime
  closeAt DateTime
  isOff   Boolean
  storeId Int      @unique
  store   Store    @relation(fields: [storeId], references: [id])

  @@map("operation_hours")
}

// d

model MessageTemplate {
  id      Int    @id @default(autoincrement())
  name    String
  content String
  storeId Int
  store   Store  @relation(fields: [storeId], references: [id])

  @@map("message_templates")
}

// d

model Decoration {
  id                 Int                 @id @default(autoincrement())
  type               String
  storeOnDecorations StoreOnDecoration[]

  @@map("decorations")
}

// d

model BankAccount {
  id        Int    @id @default(autoincrement())
  bank      String
  accNumber String
  accName   String
  storeId   Int
  store     Store  @relation(fields: [storeId], references: [id])

  @@map("bank_accounts")
}

// d

model Product {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  attachments  String
  isActive     Boolean
  size         Int
  minimumOrder Int
  storeId      Int
  store        Store      @relation(fields: [storeId], references: [id])
  categories   Category[]
  variants     Variant[]

  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("categories")
}

// VARIANT THAT ARE AVAILABLE FOR SALE ARE VARIANT THAT DOES NOT HAVE SUBS-VARIANTS 
// Variant that have parentId null is a root variant  
model Variant {
  id            Int       @id @default(autoincrement())
  name          String
  // isForSale     Boolean   @default(false)
  image         String?
  isActive      Boolean   @default(false)
  sku           String?
  weight        String?
  stock         Int?
  price         Int?
  parentId      Int?
  parentVariant Variant?  @relation("Variant", fields: [parentId], references: [id], onDelete: Cascade)
  subVariants   Variant[] @relation("Variant")

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // VariantOption VariantOption[]
  cartItems CartItem[]
  Order     Order[]

  @@map("product_variants")
}

// model VariantOption {
//   id                  Int                   @id @default(autoincrement())
//   name                String
//   variantId           Int
//   variant             Variant               @relation(fields: [variantId], references: [id])
//   VariantOptionValues VariantOptionValues[]
// }

// // d

// model VariantOptionValues {
//   id              Int           @id @default(autoincrement())
//   sku             String
//   weight          String
//   stock           Int
//   price           Int
//   isActive        Boolean
//   variantOptionId Int
//   variantOption   VariantOption @relation(fields: [variantOptionId], references: [id])
// }

// d

model CartItem {
  // id             Int     @id @default(autoincrement())
  qty            Int
  price          Int
  cartId         Int
  cart           Cart    @relation(fields: [cartId], references: [id])
  // userId         Int
  // user           User    @relation(fields: [userId], references: [id])
  variantId      Int
  productVariant Variant @relation(fields: [variantId], references: [id])
  // storeId Int
  // store   Store @relation(fields: [storeId], references: [id])

  @@id([cartId, variantId])
  @@map("cart_items")
}

// d

model Location {
  id             Int      @id @default(autoincrement())
  name           String
  address        String?
  postalCode     String?
  cityDistrict   String?
  province       String?
  latitude       String?
  longitude      String?
  storeId        Int?
  store          Store?   @relation(fields: [storeId], references: [id])
  profileId      Int?
  profile        Profile? @relation(fields: [profileId], references: [id])
  isMainLocation Boolean
}

// d

model Order {
  id                   Int         @id @default(autoincrement())
  status               OrderStatus @default(NOT_PAID)
  qty                  Int
  pricePerProduct      Int
  shippingRate         Int
  discount             Int?
  receiverAddress      String?
  receiverPostalCode   String?
  receiverCityDistrict String?
  receiverProvince     String?
  receiverLatitude     String?
  receiverLongitude    String?
  userId               Int?
  user                 User?       @relation(fields: [userId], references: [id])
  productVariantId     Int
  productVariant       Variant     @relation(fields: [productVariantId], references: [id])
  courier              Courier?

  @@map("orders")
}

enum OrderStatus {
  NOT_PAID
  NEW_ORDER
  READY_TO_DELIVER
  ON_DELIVERY
  SUCCESS
  CANCELLED
}
